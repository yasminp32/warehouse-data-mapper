.gitignore
```

```javascript
// scripts/version_check.js
const fs = require('fs');
const path = require('path');

function verifyPackageVersions() {
  const packageJsonPath = path.join(__dirname, '..', 'package.json'); // Path to package.json
  const packageJson = JSON.parse(fs.readFileSync(packageJsonPath, 'utf-8'));
  const dependencies = packageJson.dependencies;

  let hasMismatches = false;

  const checkVersion = (packageName, expectedVersion) => {
    try {
      const modulePath = path.join(__dirname, '..', 'node_modules', packageName, 'package.json');
      const modulePackageJson = JSON.parse(fs.readFileSync(modulePath, 'utf-8'));
      const installedVersion = modulePackageJson.version;

      if (installedVersion !== expectedVersion) {
        console.error(`Version mismatch for ${packageName}. Expected: ${expectedVersion}, Installed: ${installedVersion}`);
        hasMismatches = true;
      } else {
        console.log(`Version check passed for ${packageName}: ${installedVersion}`);
      }
    } catch (error) {
      console.error(`Could not verify version for ${packageName}: ${error.message}`);
      hasMismatches = true;
    }
  };

  for (const packageName in dependencies) {
    if (dependencies.hasOwnProperty(packageName)) {
      checkVersion(packageName, dependencies[packageName]);
    }
  }

  if (hasMismatches) {
    console.error('Version verification failed. Please update your dependencies.');
    process.exit(1); // Exit with a non-zero code to indicate failure
  } else {
    console.log('All dependency versions verified successfully.');
    process.exit(0); // Exit with a zero code to indicate success
  }
}

verifyPackageVersions();
```

```javascript
// scripts/test/version_check_test.js
const { execSync } = require('child_process');
const path = require('path');

describe('Version Check Script', () => {
  it('should pass the version check for three', () => {
    const scriptPath = path.join(__dirname, '..', 'version_check.js');
    try {
      const result = execSync(`node ${scriptPath}`, { encoding: 'utf-8' });
      expect(result).toContain('Version check passed for three');
    } catch (error) {
      // If the script fails (exits with a non-zero code), the error object will contain the output
      console.error('Script execution failed:', error);
      // Fail the test if the script does not pass
      expect(error).toBeNull();
    }
  }, 60000);
});